#!/bin/bash

## Set up suffix for adjoint run: "_ad"
#  or leave as "" for forward run
suff=""
build_suff=".192"
input_suff=".192"
run_suff=".192"
use_masks="true"
use_perturbation=""
use_extra_ctrls=""
use_ecco_ctrls="true"
use_ecco_binaries="true"
use_ecco_obs=""

## Set up directories
root_dir=$WORK/eccov4-euc/MITgcm

exp_dir=$PWD
build_dir=$exp_dir/build$suff$build_suff

run_dir=$SCRATCH/eccov4-euc/ecco_write_hourly/run$suff$run_suff
wk_dir=$exp_dir/run$suff$run_suff
input_dir=$exp_dir/input$suff$input_suff

if [[ $build_suff == ".192" ]] ; then
    submit_script=submit_scratch_192$suff
else
    submit_script=submit_scratch$suff
fi
submit_script_path=$exp_dir/$submit_script

## Set optional directories 
masks_dir=$exp_dir/masks_all_lon
perturb_dir=
ctrl_dir=
binary_dir=$crios_dir/llc90/global/eccov4r4/input_init
ctrl_dir=$crios_dir/llc90/global/eccov4r4/xx
obs_dir=$crios_dir/llc90/global/eccov4r4/input_obs
forcing_dir=$crios_dir/llc90/global/eccov4r4/forcing

## Make corresponding directory in WORK
if [ ! -d $wk_dir ] ; then
	echo "Making workrun dir: "$wk_dir" ..."
	mkdir $wk_dir
fi


## Make work directory in SCRATCH
if [ ! -d $run_dir ] ; then
	echo "Making "$run_dir" ..."
    mkdir $run_dir
    mkdir $run_dir/diags
    mkdir $run_dir/tapes
    mkdir $run_dir/profiles
fi       

## Link ALL of the files
echo "Grabbing necessary files ..."

#-------------------------------------------------
# Submission script
#-------------------------------------------------
cp $submit_script_path $run_dir
sed -i "s/workrun=/workrun=\$WORK\/eccov4\-euc\/ecco_write_hourly\/run${suff}${run_suff}/g" $run_dir/$submit_script

#-------------------------------------------------
# Executable
#-------------------------------------------------
ln -sfv $build_dir/mitgcmuv$suff $run_dir

#-------------------------------------------------
# Namelists
#-------------------------------------------------
ln -sf $input_dir/* $run_dir

#-------------------------------------------------
# pickups, viscosity, bathymetry, etc
#-------------------------------------------------
if [ "$use_ecco_binaries" == "true" ] ; then
    if [ -d "$binary_dir" ] ; then
        echo "** Grabbing all binaries"
        ln -s ${binary_dir}/* $run_dir

    else
        echo "** Could not find $binary_dir ..."
    fi
else
    echo "** ECCO Init data not used..."
fi

#-------------------------------------------------
# ecco ctrl vector
#-------------------------------------------------
if [ "$use_ecco_ctrls" == "true" ] ; then
    if [ -d "$ctrl_dir" ] ; then
        echo "** Grabbing ctrls"

        ln -s ${ctrl_dir}/xx* $run_dir
        ln -s ${ctrl_dir}/../error_weight/ctrl_weight $run_dir
    else
        echo "** Could not find $ctrl_dir ..."
    fi
else
    echo "** ECCO ctrls not used..."
fi

#-------------------------------------------------
# ecco observations
#-------------------------------------------------
if [ "$use_ecco_obs" == "true" ] ; then
    if [ -d "$obs_dir" ] ; then
        echo "** Grabbing obs"

        ln -s ${obs_dir}/* $run_dir
    else
        echo "** Could not find $obs_dir ..."
    fi
else
    echo "** ECCO observations not used..."
fi

#-------------------------------------------------
# forcing
#-------------------------------------------------
if [ -d "$forcing_dir" ] ; then
    echo "** Grabbing forcing dir"

    ln -s ${forcing_dir} $run_dir
else
    echo "** Could not find $forcing_dir ..."
fi

#-------------------------------------------------
# Masks
#-------------------------------------------------
if [ "$use_masks" == "true" ] ; then
    if [ -d $masks_dir ] ; then
        echo "** Grabbing masks ..."
        ln -sf $masks_dir $run_dir
    else
      echo "** No masks found in $masks_dir ... "
    fi
else
    echo "** Masks not used ..."
fi

#-------------------------------------------------
# Extra Controls
#-------------------------------------------------
if [ "$use_extra_ctrls" == "true" ] ; then
    if [ -d $ctrl_dir ] ; then 
        echo "** Grabbing extra (zero) controls ..."
        ln -sf $ctrl_dir/* $run_dir
    else
        echo "** No additional control vectors ... "
    fi
else
    echo "** Extra controls not used ..."
fi

#-------------------------------------------------
# Perturbation
#-------------------------------------------------
if [ "$use_perturbation" == "true" ] ; then 
    if [ -d $perturb_dir ] ; then
        echo "** Grabbing perturbation ..."
        ln -sf $perturb_dir/* $run_dir
    else
        echo "** Could not find perturbation directory: $perturb_dir ... "
    fi
else
    echo "** Perturbation not used ..."
fi


echo "Ready to execute ..."

echo ""
echo "*** Pro tips: "
echo "      - Check data.pkg: useAUTODIFF = .true.? usePROFILES = .false.? "
echo ""
echo "      - Check data: "
echo "           nTimeSteps correct? tapes directory uncommented? adjDump = false?"
echo ""
echo "      - Check data.ctrl ... mult = 0 for non-optimize run? "
echo "           have the necessary xx_<parameter> files?"
echo ""
echo "      - Check data.diagnostics: have the filenames set with diags/ prefix? "
echo ""
echo "      - Check data.exf: directory set for correct forcing files? period correct?"
echo "" 
echo "      - Check data.ecco: ... just make sure it looks good"
echo ""
echo "      - Check to make sure any masks are set properly ... "
echo ""
echo "      - Check submit file for .."
echo "           Correct queue? "
echo "           forward run: <exec> mitgcmuv "
echo "           adjoint: <exec> mitgcmuv_ad "
echo "           walltime correct? " 
echo "		 DIFFERENT FOR SCRATCH: change workrun directory in submit file "
echo ""
echo "Assuming this is done, ready for launch ... "
echo ""
echo ""
echo "Head to $run_dir to run..."
echo ""
